knitr::opts_chunk$set(echo = TRUE)
download9.bib <- import_results(file = "BibChunks/download9.bib", verbose = TRUE)
# run every time
# load required packages
library(litsearchr)
#install.packages("revtools")
library(revtools)
library(tidyverse)
# set working directory to file location
setwd("~/University/University 2020-2021/thesis/MicrobiomeThesis")
download9.bib <- import_results(file = "BibChunks/download9.bib", verbose = TRUE)
View(download9.bib)
knitr::opts_chunk$set(echo = TRUE)
# run every time
# load required packages
library(litsearchr)
#install.packages("revtools")
library(revtools)
library(tidyverse)
# set working directory to file location
setwd("~/University/University 2020-2021/thesis/MicrobiomeThesis")
# read the initial .RIS data into R
importRisely <- import_results(file = "ReferencesRisely.ris", verbose = TRUE)
import <- import_results(file = "ReferencesCompiled01.txt", verbose = TRUE) %>%
# join compiled references from R with Risely papers
full_join(importRisely)
download10.bib <- import_results(file = "BibChunks/download10.bib", verbose = TRUE)
View(download10.bib)
download11.bib <- import_results(file = "BibChunks/download11.bib", verbose = TRUE)
View(download11.bib)
library(readxl)
library(tidyverse)
library(car)
library(effects)
library(ggplot2)
install.packages("ggpubr")
library(ggpubr)
#load dataframe
Biol3010_Pipeline_Data <- read_excel("Biol3010_Pipeline_Data.xlsx")
View(Biol3010_Pipeline_Data)
#ANCOVA
pipeline_anc <- lm(species_richness~habitat_type + spatial_distance + species_abundance + spatial_distance*habitat_type, data = Biol3010_Pipeline_Data)
Anova(pipeline_anc, type=3)
summary(pipeline_anc)
#residuals
Biol3010_Pipeline_Data$predicted <- predict(pipeline_anc)# Save the predicted
Biol3010_Pipeline_Data$residuals <- residuals(pipeline_anc) # Save the residual values
#load dataframe
Biol3010_Pipeline_Data <- read_excel("Biol3010_Pipeline_Data.xlsx")
#load dataframe
Biol3010_Pipeline_Data <- read_excel("Biol3010_Pipeline_Data.xlsx")
View(Biol3010_Pipeline_Data)
Tadpoles=read.csv(file.choose("tadpoles.csv"))
View(Tadpoles)
str(Tadpoles)
attach(Tadpoles)
Mod1 <- lm(Rel.fit ~ RW1. + RW2. + RW3. + Centroid.size)
summary(Mod1)
knitr::opts_chunk$set(echo = TRUE)
# load required packages
library(easyPubMed)
library(revtools)
library(litsearchr)
library(tidyverse)
# write query based on searchterms and date parameter
CompiledData <- '(((microbial community) OR (bacterial community) OR (bacterial communities) OR (microbial communities) OR (microbial species)) AND ((community structure) OR (microbiome project) OR (community composition)) AND ((core microbiome)) AND (("2018"[Date - Publication] : "2020"[Date - Publication]))'
# get the updated list of PubMedIDs
entrez <- get_pubmed_ids(CompiledData)
# How many results did the query return?
entrez$Count
# download final list of articles with abstract information
abstracts <- batch_pubmed_download(pubmed_query_string = CompiledData,
dest_file_prefix = "ReferencesLate2020",
format = "medline",
batch_size = 483)
# import the new results to confirm the query worked
FimportCompiledData <- import_results(file = "ReferencesLate202001.txt", verbose = TRUE)
# read the initial .RIS data into R
importRisely <- import_results(file = "ReferencesRisely.ris", verbose = TRUE)
import <- import_results(file = "ReferencesCompiled01.txt", verbose = TRUE) %>%
# join compiled references from R with Risely papers
full_join(importRisely)
# write the new citations to file (anti join takes papers only in the download)
anti_join(FimportCompiledData, import, by = "pubmed_id") %>%
write_bibliography(., "Late2020.bib", format = "bib")
Late2020.bib <- import_results(file = "BibChunks/Late2020.bib", verbose = TRUE)
View(Late2020.bib)
knitr::opts_chunk$set(echo = TRUE)
# run every time
# load required packages
library(litsearchr)
#install.packages("revtools")
library(revtools)
library(tidyverse)
# set working directory to file location
setwd("~/University/University 2020-2021/thesis/MicrobiomeThesis")
# read the initial .RIS data into R
importRisely <- import_results(file = "ReferencesRisely.ris", verbose = TRUE)
import <- import_results(file = "ReferencesCompiled01.txt", verbose = TRUE) %>%
# join compiled references from R with Risely papers
full_join(importRisely)
# this is re-run for every new subset
# this object should have 5 fewer articles than the previous import
importSub <- import_results(file = "BibChunks/download1.bib", verbose = TRUE) %>%
# additional files for import go here, like for initial import above
# make sure NA's are NA's not strings (reads bib format funny)
mutate_all(~ replace(., .=='NA', NA)) %>%
# remove the articles already assessed from the original download
# sorting by title only to streamline the anti_join
anti_join(import, ., by = "title")
# this is the list of articles the next subset is made from
download16.bib <- import_results(file = "BibChunks/download16.bib", verbose = TRUE)
View(download16.bib)
download15.bib <- import_results(file = "BibChunks/download15.bib", verbose = TRUE)
View(download15.bib)
download16.bib <- import_results(file = "BibChunks/download16.bib", verbose = TRUE)
View(download16.bib)
download17.bib <- import_results(file = "BibChunks/download17.bib", verbose = TRUE)
View(download17.bib)
download16.bib <- import_results(file = "BibChunks/download16.bib", verbose = TRUE)
View(download16.bib)
importRiselyLate <- import_results(file = "Late2020.bib", verbose = TRUE)
set <- importLate[sample(nrow(import), 7),]
importLate <- import_results(file = "Late2020.bib", verbose = TRUE)
set <- importLate[sample(nrow(import), 7),]
# writing file called download1 to BibChunks folder (could use better names)
# writing to bib to ensure all info is captured (even columns with NA)
write_bibliography(set, "BibChunks/Late2020.bib", format = "bib")
set <- importLate[sample(nrow(importLate), 7),]
write_bibliography(set, "BibChunks/Late2020.bib", format = "bib")
importSubLate1 <- import_results(file = "BibChunks/Late2020.bib", verbose = TRUE) %>%
mutate_all(~ replace(., .=='NA', NA)) %>%
anti_join(importSubLate1, ., by = "title")
set <- importLate[sample(nrow(importLate), 7),]
write_bibliography(set, "BibChunks/Late2020.bib", format = "bib")
importSubLate1 <- import_results(file = "BibChunks/Late2020.bib", verbose = TRUE) %>%
mutate_all(~ replace(., .=='NA', NA)) %>%
anti_join(importLate, ., by = "title")
View(Late2020.bib)
# read the initial .RIS data into R
importRiselyLate <- import_results(file = "Late2020.bib", verbose = TRUE)
importLate <- import_results(file = "Late2020.bib", verbose = TRUE) %>%
# read the initial .RIS data into R
importRiselyLate <- import_results(file = "Late2020.bib", verbose = TRUE)
importLate <- import_results(file = "Late2020.bib", verbose = TRUE) %>%
# read the initial .RIS data into R
importRiselyLate <- import_results(file = "Late2020.bib", verbose = TRUE)
# write query based on searchterms and date parameter
CompiledData <- '(((microbial community) OR (bacterial community) OR (bacterial communities) OR (microbial communities) OR (microbial species)) AND ((community structure) OR (microbiome project) OR (community composition)) AND ((core microbiome)) AND (("2018"[Date - Publication] : "2020"[Date - Publication]))'
# get the updated list of PubMedIDs
entrez <- get_pubmed_ids(CompiledData)
# How many results did the query return?
entrez$Count
# download final list of articles with abstract information
abstracts <- batch_pubmed_download(pubmed_query_string = CompiledData,
dest_file_prefix = "ReferencesLate2020",
format = "medline",
batch_size = 483)
# import the new results to confirm the query worked
FimportCompiledData <- import_results(file = "ReferencesLate202001.txt", verbose = TRUE)
# read the initial .RIS data into R
importRisely <- import_results(file = "ReferencesRisely.ris", verbose = TRUE)
import <- import_results(file = "ReferencesCompiled01.txt", verbose = TRUE) %>%
# join compiled references from R with Risely papers
full_join(importRisely)
# write the new citations to file (anti join takes papers only in the download)
anti_join(FimportCompiledData, import, by = "pubmed_id") %>%
write_bibliography(., "Late2020.bib", format = "bib")
Late2020.bib <- import_results(file = "BibChunks/Late2020.bib", verbose = TRUE)
View(Late2020.bib)
Late2020.bib <- import_results(file = "BibChunks/Late2020.bib", verbose = TRUE)
View(Late2020.bib)
# write the new citations to file (anti join takes papers only in the download)
anti_join(FimportCompiledData, import, by = "pubmed_id") %>%
write_bibliography(., "Late2020.bib", format = "bib")
Late2020.bib <- import_results(file = "BibChunks/Late2020.bib", verbose = TRUE)
View(Late2020.bib)
# read the initial .RIS data into R
importRisely <- import_results(file = "ReferencesRisely.ris", verbose = TRUE)
import <- import_results(file = "ReferencesCompiled01.txt", verbose = TRUE) %>%
# join compiled references from R with Risely papers
full_join(importRisely)
# write the new citations to file (anti join takes papers only in the download)
anti_join(FimportCompiledData, import, by = "pubmed_id") %>%
write_bibliography(., "Late2020.bib", format = "bib")
# read the initial .RIS data into R
importRisely <- import_results(file = "ReferencesRisely.ris", verbose = TRUE)
import <- import_results(file = "ReferencesCompiled01.txt", verbose = TRUE) %>%
# join compiled references from R with Risely papers
full_join(importRisely)
# load required packages
library(easyPubMed)
library(revtools)
library(litsearchr)
library(tidyverse)
# write query based on searchterms and date parameter
CompiledData <- '(((microbial community) OR (bacterial community) OR (bacterial communities) OR (microbial communities) OR (microbial species)) AND ((community structure) OR (microbiome project) OR (community composition)) AND ((core microbiome)) AND (("2018"[Date - Publication] : "2020"[Date - Publication]))'
# get the updated list of PubMedIDs
entrez <- get_pubmed_ids(CompiledData)
# How many results did the query return?
entrez$Count
# download final list of articles with abstract information
abstracts <- batch_pubmed_download(pubmed_query_string = CompiledData,
dest_file_prefix = "ReferencesLate2020",
format = "medline",
batch_size = 483)
# import the new results to confirm the query worked
FimportCompiledData <- import_results(file = "ReferencesLate202001.txt", verbose = TRUE)
# read the initial .RIS data into R
importRisely <- import_results(file = "ReferencesRisely.ris", verbose = TRUE)
import <- import_results(file = "ReferencesCompiled01.txt", verbose = TRUE) %>%
# join compiled references from R with Risely papers
full_join(importRisely)
# write the new citations to file (anti join takes papers only in the download)
anti_join(FimportCompiledData, import, by = "pubmed_id") %>%
write_bibliography(., "Late2020.bib", format = "bib")
View(Late2020.bib)
# write the new citations to file (anti join takes papers only in the download)
anti_join(FimportCompiledData, import, by = "pubmed_id") %>%
write_bibliography(., "Late2020.bib", format = "bib")
Late2020.bib <- import_results(file = "BibChunks/Late2020.bib", verbose = TRUE)
View(Late2020.bib)
View(importSubLate1)
knitr::opts_chunk$set(echo = TRUE)
# load required packages
library(easyPubMed)
library(revtools)
library(litsearchr)
library(tidyverse)
# write query based on searchterms and date parameter
CompiledData <- '(((microbial community) OR (bacterial community) OR (bacterial communities) OR (microbial communities) OR (microbial species)) AND ((community structure) OR (microbiome project) OR (community composition)) AND ((core microbiome)) AND (("2018"[Date - Publication] : "2020"[Date - Publication]))'
# get the updated list of PubMedIDs
entrez <- get_pubmed_ids(CompiledData)
# How many results did the query return?
entrez$Count
# download final list of articles with abstract information
abstracts <- batch_pubmed_download(pubmed_query_string = CompiledData,
dest_file_prefix = "ReferencesLate2020",
format = "medline",
batch_size = 483)
# import the new results to confirm the query worked
FimportCompiledData <- import_results(file = "ReferencesLate202001.txt", verbose = TRUE)
# read the initial .RIS data into R
importRisely <- import_results(file = "ReferencesRisely.ris", verbose = TRUE)
import <- import_results(file = "ReferencesCompiled01.txt", verbose = TRUE) %>%
# join compiled references from R with Risely papers
full_join(importRisely)
# write the new citations to file (anti join takes papers only in the download)
anti_join(FimportCompiledData, import, by = "pubmed_id") %>%
write_bibliography(., "Late2020.bib", format = "bib")
Late2020.bib <- import_results(file = "BibChunks/Late2020.bib", verbose = TRUE)
View(Late2020.bib)
#set working directory and bring in the Excel Sheet
("~/University/University 2020-2021/thesis/MicrobiomeThesis")
library(readxl)
library(tidyverse)
# read in spreadsheets
ResultsMicrobiome <- read_excel("micro.xlsx")
# read in spreadsheets
ResultsMicrobiome <- read_excel("micro.xlsx")
# read in spreadsheets
ResultsMicrobiome <- read_excel("micro.xlsx")
ResultsMicrobiome <- import_results(file = "micro.xlsx", verbose = TRUE)
library(readxl)
# read in spreadsheets
ResultsMicrobiome <- read_excel("micro")
# read in spreadsheets
ResultsMicrobiome <- read_excel("micro.xlsx")
# read in spreadsheets
read_excel("micro.xlsx")
# read in spreadsheets
ResultsMicrobiome <- read_excel("micro.xlsx")
# read in spreadsheets
ResultsMicrobiome <- read_excel(micro.xlsx)
# read in spreadsheets
ResultsMicrobiome <- read_excel("micro.xlsx", sheet=Thesis)
# read in spreadsheets
ResultsMicrobiome <- read_excel("D:/University/University 2020-2021/thesis/MicrobiomeThesis/micro.xlsx", sheet=Thesis)
# read in spreadsheets
ResultsMicrobiome <- read_excel("~/University/University 2020-2021/thesis/MicrobiomeThesis/micro.xlsx", sheet=Thesis)
# read in spreadsheets
ResultsMicrobiome <- read_excel("~/University/University 2020-2021/thesis/MicrobiomeThesis/micro.xlsx")
View(ResultsMicrobiome)
# table for field and nested core
chiFilter(ResultsMicrobiome$fieldOfStudy, ResultsMicrobiome$nestedCore)
chiFilter <- function(c1, c2){
# c1 = first column of interest
# c2 = second column of interest
df1 <- data.frame(c1, c2) %>% na.omit()
tab <- table(df1$c1, df1$c2)
chi <- chisq.test(tab)
return(chi)
}
# table for field and nested core
chiFilter(ResultsMicrobiome$fieldOfStudy, ResultsMicrobiome$nestedCore)
# table for field and common core
chiFilter(ResultsMicrobiome$fieldOfStudy, ResultsMicrobiome$commonCore)
# table for field and temporal core
chiFilter(ResultsMicrobiome$fieldOfStudy, ResultsMicrobiome$temporalCore)
# apply (quicker step)
columns <- list(ResultsMicrobiome$nestedCore, ResultsMicrobiome$commonCore, ResultsMicrobiome$temporalCore)
lapply(columns, chiFilter, c1 = ResultsMicrobiome$fieldOfStudy)
# make table with counts of papers from positive/negative interaction and core definition used
lapply(columns, chiFilter, c1 = ResultsMicrobiome$positiveOrNegativeInteraction)
# table for study system and core definition used
lapply(columns, chiFilter, c1 = ResultsMicrobiome$hostType)
#set working directory and bring in the Excel Sheet
("~/University/University 2020-2021/thesis/MicrobiomeThesis")
library(readxl)
library(tidyverse)
# read in spreadsheets
ResultsMicrobiome <- read_excel("~/University/University 2020-2021/thesis/MicrobiomeThesis/micro.xlsx")
View(ResultsMicrobiome)
# functions for analysis
chiFilter <- function(c1, c2){
# c1 = first column of interest
# c2 = second column of interest
df1 <- data.frame(c1, c2) %>% na.omit()
tab <- table(df1$c1, df1$c2)
chi <- chisq.test(tab)
return(chi)
}
# table for field and nested core
chiFilter(ResultsMicrobiome$fieldOfStudy, ResultsMicrobiome$nestedCore)
# table for field and common core
chiFilter(ResultsMicrobiome$fieldOfStudy, ResultsMicrobiome$commonCore)
# table for field and temporal core
chiFilter(ResultsMicrobiome$fieldOfStudy, ResultsMicrobiome$temporalCore)
# apply (quicker step)
columns <- list(ResultsMicrobiome$nestedCore, ResultsMicrobiome$commonCore, ResultsMicrobiome$temporalCore)
### Primary Analyses, Chi Square Tests
# table for field of study and core definition used
lapply(columns, chiFilter, c1 = ResultsMicrobiome$fieldOfStudy)
# table for positive/negative interaction and core definition used
lapply(columns, chiFilter, c1 = ResultsMicrobiome$positiveOrNegativeInteraction)
# table for study system and core definition used
lapply(columns, chiFilter, c1 = ResultsMicrobiome$hostType)
# table for field of study and core definition used
lapply(columns, chiFilter, c1 = ResultsMicrobiome$fieldOfStudy)
# table for sequencing method and core definition used
lapply(columns, chiFilter, c1 = ResultsMicrobiome$`sequencingMethod (16S,18S, shotgun, WGS - whole genome shotgun, RNAseq)`)
# table for usage of PCR and core definition used
lapply(columns, chiFilter, c1 = ResultsMicrobiome$`PCR (Yes/No)`)
# table for positive/negative interaction and core definition used
lapply(columns, chiFilter, c1 = ResultsMicrobiome$source)
bonferroni_ex <- pairwise.t.test(fieldOfStudy, columns, p.adjust = "two.sided")
bonferroni_ex <- pairwise.t.test(ResultsMicrobiome$fieldOfStudy, ResultsMicrobiome$columns, p.adjust = "two.sided")
bonferroni_ex <- pairwise.t.test(ResultsMicrobiome$fieldOfStudy, columns, p.adjust = "two.sided")
#set working directory and bring in the Excel Sheet
#setwd("~/University/University 2020-2021/thesis/MicrobiomeThesis")
library(readxl)
library(tidyverse)
#~/University/University 2020-2021/thesis/MicrobiomeThesis/
# read in spreadsheets
ResultsMicrobiome <- read_excel("micro.xlsx")
View(ResultsMicrobiome)
# functions for analysis
chiFilter <- function(c1, c2){
# c1 = first column of interest
# c2 = second column of interest
df1 <- data.frame(c1, c2) %>% na.omit()
tab <- table(df1$c1, df1$c2)
chi <- chisq.test(tab)
return(chi)
}
# table for field and nested core
chiFilter(ResultsMicrobiome$fieldOfStudy, ResultsMicrobiome$nestedCore)
# table for field and common core
chiFilter(ResultsMicrobiome$fieldOfStudy, ResultsMicrobiome$commonCore)
# table for field and temporal core
chiFilter(ResultsMicrobiome$fieldOfStudy, ResultsMicrobiome$temporalCore)
#set working directory and bring in the Excel Sheet
#setwd("~/University/University 2020-2021/thesis/MicrobiomeThesis")
library(readxl)
library(tidyverse)
#~/University/University 2020-2021/thesis/MicrobiomeThesis/
# read in spreadsheets
ResultsMicrobiome <- read_excel("micro.xlsx")
View(ResultsMicrobiome)
# functions for analysis
chiFilter <- function(c1, c2){
# c1 = first column of interest
# c2 = second column of interest
df1 <- data.frame(c1, c2) %>% na.omit()
tab <- table(df1$c1, df1$c2)
chi <- chisq.test(tab)
return(chi)
}
# table for field and nested core
chiFilter(ResultsMicrobiome$fieldOfStudy, ResultsMicrobiome$nestedCore)
# functions for analysis
chiFilter <- function(c1, c2){
# c1 = first column of interest
# c2 = second column of interest
df1 <- data.frame(c1, c2) %>% na.omit()
tab <- table(df1$c1, df1$c2)
chi <- chisq.test(tab)
return(chi)
}
# table for field and nested core
chiFilter(ResultsMicrobiome$fieldOfStudy, ResultsMicrobiome$nestedCore)
# apply (quicker step)
columns <- list(ResultsMicrobiome$nestedCore, ResultsMicrobiome$commonCore, ResultsMicrobiome$temporalCore)
# apply (quicker step)
columns <- list(ResultsMicrobiome$NestedCore, ResultsMicrobiome$CommonCore, ResultsMicrobiome$TemporalCore)
#set working directory and bring in the Excel Sheet
#setwd("~/University/University 2020-2021/thesis/MicrobiomeThesis")
library(readxl)
library(tidyverse)
#~/University/University 2020-2021/thesis/MicrobiomeThesis/
# read in spreadsheets
ResultsMicrobiome <- read_excel("micro.xlsx")
View(ResultsMicrobiome)
# functions for analysis
chiFilter <- function(c1, c2){
# c1 = first column of interest
# c2 = second column of interest
df1 <- data.frame(c1, c2) %>% na.omit()
tab <- table(df1$c1, df1$c2)
chi <- chisq.test(tab)
return(chi)
}
# apply (quicker step)
columns <- list(ResultsMicrobiome$NestedCore, ResultsMicrobiome$CommonCore, ResultsMicrobiome$TemporalCore)
# table for field of study and core definition used
lapply(columns, chiFilter, c1 = ResultsMicrobiome$fieldOfStudy)
# table for field of study and core definition used
lapply(columns, chiFilter, c1 = ResultsMicrobiome$FieldOfStudy)
columns
ResultsMicrobiome %>% select(fieldOfStudy, nestedCore) %>%
na.omit()
t.test(.$fieldOfStudy, .$nestedCore, paired = T, alternative = "two.sided")
#set working directory and bring in the Excel Sheet
#setwd("~/University/University 2020-2021/thesis/MicrobiomeThesis")
library(readxl)
library(tidyverse)
#~/University/University 2020-2021/thesis/MicrobiomeThesis/
# read in spreadsheets
ResultsMicrobiome <- read_excel("micro.xlsx")
View(ResultsMicrobiome)
# functions for analysis
chiFilter <- function(c1, c2){
# c1 = first column of interest
# c2 = second column of interest
df1 <- data.frame(c1, c2) %>% na.omit()
tab <- table(df1$c1, df1$c2)
chi <- chisq.test(tab)
return(chi)
}
# apply (quicker step)
columns <- list(ResultsMicrobiome$NestedCore, ResultsMicrobiome$CommonCore, ResultsMicrobiome$TemporalCore)
columns
ResultsMicrobiome %>% select(fieldOfStudy, nestedCore) %>%
na.omit() %>%
t.test(.$fieldOfStudy, .$nestedCore, paired = T, alternative = "two.sided")
columns
ResultsMicrobiome %>% select(FieldOfStudy, NestedCore) %>%
na.omit() %>%
t.test(.$FieldOfStudy, .$NestedCore, paired = T, alternative = "two.sided")
print(tab)
# functions for analysis
chiFilter <- function(c1, c2){
# c1 = first column of interest
# c2 = second column of interest
df1 <- data.frame(c1, c2) %>% na.omit()
tab <- table(df1$c1, df1$c2)
print(tab)
chi <- chisq.test(tab)
return(chi)
}
# table for field of study and core definition used
lapply(columns, chiFilter, c1 = ResultsMicrobiome$FieldOfStudy)
# table for sequencing method and core definition used
lapply(columns, chiFilter, c1 = ResultsMicrobiome$SequencingMethod)
# table for study system and core definition used
lapply(columns, chiFilter, c1 = ResultsMicrobiome$HostType)
# table for sequencing platform and core definition used
lapply(columns, chiFilter, c1 = ResultsMicrobiome$SequencingPlatform)
# table for usage of PCR and core definition used
lapply(columns, chiFilter, c1 = ResultsMicrobiome$PCR)
# table for positive/negative interaction and core definition used
lapply(columns, chiFilter, c1 = ResultsMicrobiome$PositiveOrNegativeInteraction)
# table for effect on host fitness and core definition used
lapply(columns, chiFilter, c1 = ResultsMicrobiome$EffectOnHostFitness)
# table for source and core definition used
lapply(columns, chiFilter, c1 = ResultsMicrobiome$Source)
#set working directory and bring in the Excel Sheet
#setwd("~/University/University 2020-2021/thesis/MicrobiomeThesis")
library(readxl)
library(tidyverse)
library(ggplot2)
install.packages("devtools")
library(devtools)
devtools::install_github("haleyjeppson/ggmosaic")
install.packages("devtools")
devtools::install_github("haleyjeppson/ggmosaic")
# field of study x core microbiome
ggplot(data = ResultsMicrobiome) + geom_mosaic(aes(x = product(V1), fill=FieldOfStudy)) +
labs(title='f(do_you_recline | rude_to_recline) f(rude_to_recline)')
library(ggplot2)
#set working directory and bring in the Excel Sheet
#setwd("~/University/University 2020-2021/thesis/MicrobiomeThesis")
library(readxl)
library(tidyverse)
#set working directory and bring in the Excel Sheet
#setwd("~/University/University 2020-2021/thesis/MicrobiomeThesis")
library(readxl)
library(tidyverse)
#set working directory and bring in the Excel Sheet
#setwd("~/University/University 2020-2021/thesis/MicrobiomeThesis")
library(readxl)
library(tidyverse)
